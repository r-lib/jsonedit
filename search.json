[{"path":"https://jsonedit.r-lib.org/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 jsonedit authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://jsonedit.r-lib.org/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Davis Vaughan. Author, maintainer. Jeroen Ooms. Author. Microsoft Corporation. Copyright holder.           node-jsonc-parser library","code":""},{"path":"https://jsonedit.r-lib.org/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Vaughan D, Ooms J (2025). jsonedit: JSON Parsing Modification Utilities. R package version 0.1.0, https://jsonedit.r-lib.org.","code":"@Manual{,   title = {jsonedit: JSON Parsing and Modification Utilities},   author = {Davis Vaughan and Jeroen Ooms},   year = {2025},   note = {R package version 0.1.0},   url = {https://jsonedit.r-lib.org}, }"},{"path":"https://jsonedit.r-lib.org/index.html","id":"jsonedit","dir":"","previous_headings":"","what":"JSON Parsing and Modification Utilities","title":"JSON Parsing and Modification Utilities","text":"R bindings node-jsonc-parser modify format JSON files retaining comments.","code":""},{"path":"https://jsonedit.r-lib.org/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"JSON Parsing and Modification Utilities","text":"can install development version jsonedit like :","code":"pak::pak(\"r-lib/jsonedit\")"},{"path":"https://jsonedit.r-lib.org/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"JSON Parsing and Modification Utilities","text":"Parse entire file worth text text_parse() file_parse(): Parse target JSON path text_parse_at_path() file_parse_at_path(): Modify JSON file, retaining comments, using text_modify() file_modify():","code":"library(jsonedit)  text <- ' {   \"[r]\": {     // Important comment     \"editor.formatOnSave\": true,     \"editor.defaultFormatter\": \"Posit.air-vscode\"   },   \"files.trimFinalNewlines\": true,   \"editor.rulers\": [     80,     100   ], // A trailing comma } ' text_parse(text) #> $`[r]` #> $`[r]`$editor.formatOnSave #> [1] TRUE #>  #> $`[r]`$editor.defaultFormatter #> [1] \"Posit.air-vscode\" #>  #>  #> $files.trimFinalNewlines #> [1] TRUE #>  #> $editor.rulers #> $editor.rulers[[1]] #> [1] 80 #>  #> $editor.rulers[[2]] #> [1] 100 text_parse_at_path(text, c(\"[r]\", \"editor.formatOnSave\")) #> [1] TRUE  # The 2nd ruler in the array text_parse_at_path(text, list(\"editor.rulers\", 2)) #> [1] 100 # A new field cat(text_modify(text, \"new\", 1)) #>  #> { #>   \"[r]\": { #>     // Important comment #>     \"editor.formatOnSave\": true, #>     \"editor.defaultFormatter\": \"Posit.air-vscode\" #>   }, #>   \"files.trimFinalNewlines\": true, #>   \"editor.rulers\": [ #>     80, #>     100 #> ], #> \"new\": 1, // A trailing comma #> }  # Modify an existing path, retaining comments cat(text_modify(text, c(\"[r]\", \"editor.formatOnSave\"), FALSE)) #>  #> { #>   \"[r]\": { #>     // Important comment #>     \"editor.formatOnSave\": false, #>     \"editor.defaultFormatter\": \"Posit.air-vscode\" #>   }, #>   \"files.trimFinalNewlines\": true, #>   \"editor.rulers\": [ #>     80, #>     100 #>   ], // A trailing comma #> }  # Modify an array by position  # Replacement: cat(text_modify(text, list(\"editor.rulers\", 2), 20)) #>  #> { #>   \"[r]\": { #>     // Important comment #>     \"editor.formatOnSave\": true, #>     \"editor.defaultFormatter\": \"Posit.air-vscode\" #>   }, #>   \"files.trimFinalNewlines\": true, #>   \"editor.rulers\": [ #>     80, #>     20 #>   ], // A trailing comma #> }  # Insertion: options <- modification_options(is_array_insertion = TRUE) cat(text_modify(   text,   list(\"editor.rulers\", 2),   20,   modification_options = options )) #>  #> { #>   \"[r]\": { #>     // Important comment #>     \"editor.formatOnSave\": true, #>     \"editor.defaultFormatter\": \"Posit.air-vscode\" #>   }, #>   \"files.trimFinalNewlines\": true, #>   \"editor.rulers\": [ #>     80, #>     20, #>     100 #>   ], // A trailing comma #> }  # Insertion at back (when you don't know the number of existing elements) cat(text_modify(text, list(\"editor.rulers\", -1), 20)) #>  #> { #>   \"[r]\": { #>     // Important comment #>     \"editor.formatOnSave\": true, #>     \"editor.defaultFormatter\": \"Posit.air-vscode\" #>   }, #>   \"files.trimFinalNewlines\": true, #>   \"editor.rulers\": [ #>     80, #>     100, #>     20 #>   ], // A trailing comma #> }"},{"path":"https://jsonedit.r-lib.org/reference/format.html","id":null,"dir":"Reference","previous_headings":"","what":"Format a JSON file or string — format","title":"Format a JSON file or string — format","text":"Format JSON file string, preserving comments.","code":""},{"path":"https://jsonedit.r-lib.org/reference/format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format a JSON file or string — format","text":"","code":"text_format(text, ..., formatting_options = NULL)  file_format(file, ..., formatting_options = NULL)  formatting_options(   indent_width = 4L,   indent_style = \"space\",   eol = \"\\n\",   insert_final_newline = TRUE )"},{"path":"https://jsonedit.r-lib.org/reference/format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format a JSON file or string — format","text":"text single string containing JSON. ... dots future extensions must empty. formatting_options result formatting_options(). NULL, default set options used. file Path file disk. File must exist. indent_width number spaces use indicate single indent indent_style = \"space\". indent_style style indentation use. Either: \"space\" spaces. \"tab\" tabs. eol character used end line. applicable text already contain existing line ending, .e. empty string string spanning single line. insert_final_newline Whether insert final newline.","code":""},{"path":"https://jsonedit.r-lib.org/reference/format.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format a JSON file or string — format","text":"","code":"text <- '{\"foo\":[1,2]}' cat(text_format(text)) #> { #>     \"foo\": [ #>         1, #>         2 #>     ] #> }  formatting_options <- formatting_options(indent_width = 2) cat(text_format(text, formatting_options = formatting_options)) #> { #>   \"foo\": [ #>     1, #>     2 #>   ] #> }"},{"path":"https://jsonedit.r-lib.org/reference/jsonedit-package.html","id":null,"dir":"Reference","previous_headings":"","what":"jsonedit: JSON Parsing and Modification Utilities — jsonedit-package","title":"jsonedit: JSON Parsing and Modification Utilities — jsonedit-package","text":"Bindings 'node-jsonc-parser' parse, format, modify JSON files retaining comments.","code":""},{"path":[]},{"path":"https://jsonedit.r-lib.org/reference/jsonedit-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"jsonedit: JSON Parsing and Modification Utilities — jsonedit-package","text":"Maintainer: Davis Vaughan davis@posit.co Authors: Jeroen Ooms jeroenooms@gmail.com contributors: Microsoft Corporation (node-jsonc-parser library) [copyright holder]","code":""},{"path":"https://jsonedit.r-lib.org/reference/modify.html","id":null,"dir":"Reference","previous_headings":"","what":"Modify a JSON file or string — modify","title":"Modify a JSON file or string — modify","text":"Set delete fields JSON file string retaining comments whitespace.","code":""},{"path":"https://jsonedit.r-lib.org/reference/modify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modify a JSON file or string — modify","text":"","code":"text_modify(   text,   path,   value,   ...,   parse_options = NULL,   modification_options = NULL )  file_modify(   file,   path,   value,   ...,   parse_options = NULL,   modification_options = NULL )  modification_options(formatting_options = NULL, is_array_insertion = FALSE)"},{"path":"https://jsonedit.r-lib.org/reference/modify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modify a JSON file or string — modify","text":"text single string containing JSON modify. path Either: character vector representing path JSON element name, .e. c(\"[r]\", \"editor.formatOnSave\"). list strings numbers representing path JSON element name position, .e. list(\"[r]\", \"editor.rulers\", 2). Numeric positions specified positive integers applicable arrays. -1 specially recognized request insert end array. value New value. Wrap V8::JS() specify literal JavaScript value. Use NULL delete field. ... dots future extensions must empty. parse_options result parse_options(). NULL, default set options used. modification_options result modification_options(). NULL, default set options used. file Path file disk. File must exist. formatting_options result call formatting_options(). NULL, default set options used. is_array_insertion Whether treat change insertion specified path rather modification path. applicable arrays.","code":""},{"path":"https://jsonedit.r-lib.org/reference/modify.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Modify a JSON file or string — modify","text":"","code":"text <- \"{}\"  text <- text_modify(text, c('[r]', 'editor.formatOnSave'), TRUE) cat(text) #> { #>     \"[r]\": { #>         \"editor.formatOnSave\": true #>     } #> }  text <- text_modify(text, c('[r]', 'editor.formatOnSave'), NULL) cat(text) #> { #>     \"[r]\": { #>     } #> }  # Insert an array text <- text_modify(text, \"foo\", 1:3) cat(text) #> { #>     \"[r]\": { #>     }, #>     \"foo\": [ #>         1, #>         2, #>         3 #>     ] #> }  # Update the array at location 2 cat(text_modify(text, list(\"foo\", 2), 0)) #> { #>     \"[r]\": { #>     }, #>     \"foo\": [ #>         1, #>         0, #>         3 #>     ] #> }  # Insert at location 2 cat(text_modify(   text,   list(\"foo\", 2),   0,   modification_options = modification_options(is_array_insertion = TRUE) )) #> { #>     \"[r]\": { #>     }, #>     \"foo\": [ #>         1, #>         0, #>         2, #>         3 #>     ] #> }  # Insert at the end of the array. `-1` is treated as an insertion regardless # of the value of `is_array_insertion`. cat(text_modify(text, list(\"foo\", -1), 0)) #> { #>     \"[r]\": { #>     }, #>     \"foo\": [ #>         1, #>         2, #>         3, #>         0 #>     ] #> }  # Only the modified elements are reformatted text <- '{\"foo\":[1,2],\\n\"bar\":1}' cat(text_modify(text, list(\"foo\", 3), 0)) #> { #>     \"foo\": [ #>         1, #>         2, #>         0 #>     ], #> \"bar\":1}  # You can control how those elements are formatted cat(text_modify(   text,   list(\"foo\", 3),   0,   modification_options = modification_options(     formatting_options = formatting_options(indent_width = 2),     is_array_insertion = TRUE   ) )) #> { #>   \"foo\": [ #>     1, #>     2, #>     0 #>   ], #> \"bar\":1}"},{"path":"https://jsonedit.r-lib.org/reference/parse.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse a JSON file or string — parse","title":"Parse a JSON file or string — parse","text":"text_parse() file_parse() parse JSON R object. text_parse_at_path() file_parse_at_path() parse JSON requested JSON path, .e. c(\"[r]\", \"editor.formatOnSave\").","code":""},{"path":"https://jsonedit.r-lib.org/reference/parse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse a JSON file or string — parse","text":"","code":"text_parse(text, ..., parse_options = NULL)  file_parse(file, ..., parse_options = NULL)  text_parse_at_path(text, path, ..., parse_options = NULL)  file_parse_at_path(file, path, ..., parse_options = NULL)  parse_options(   allow_comments = TRUE,   allow_trailing_comma = TRUE,   allow_empty_content = TRUE )"},{"path":"https://jsonedit.r-lib.org/reference/parse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse a JSON file or string — parse","text":"text single string containing JSON. ... dots future extensions must empty. parse_options result parse_options(). NULL, default set options used. file Path file disk. File must exist. path Either: character vector representing path JSON element name, .e. c(\"[r]\", \"editor.formatOnSave\"). list strings numbers representing path JSON element name position, .e. list(\"[r]\", \"editor.rulers\", 2). Numeric positions specified positive integers applicable arrays. allow_comments Whether allow comments parsing. allow_trailing_comma Whether allow trailing comma parsing. allow_empty_content Whether allow empty strings empty files parsing.","code":""},{"path":"https://jsonedit.r-lib.org/reference/parse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse a JSON file or string — parse","text":"","code":"text <- ' {   \"a\": 1,   \"b\": [2, 3, 4],   \"[r]\": {     \"this\": \"setting\",     // A comment!     \"that\": true   }, // A trailing comma! } '  # Parse the JSON, allowing comments (i.e. JSONC) str(text_parse(text)) #> List of 3 #>  $ a  : int 1 #>  $ b  :List of 3 #>   ..$ : int 2 #>   ..$ : int 3 #>   ..$ : int 4 #>  $ [r]:List of 2 #>   ..$ this: chr \"setting\" #>   ..$ that: logi TRUE  # Try to parse the JSON, but comments aren't allowed! parse_options <- parse_options(allow_comments = FALSE) try(text_parse(text, parse_options = parse_options)) #> Error in text_parse(text, parse_options = parse_options) :  #>   Can't parse when there are parse errors. #> ℹ Invalid comment token #>     \"this\": \"setting\", #>     // A comment! #>     \"that\": true #>    #> ℹ Invalid comment token #>     \"that\": true #>   }, // A trailing comma! #> } #>   # Try to parse the JSON, but trailing commas aren't allowed! parse_options <- parse_options(allow_trailing_comma = FALSE) try(text_parse(text, parse_options = parse_options)) #> Error in text_parse(text, parse_options = parse_options) :  #>   Can't parse when there are parse errors. #> ℹ Property name expected #>   }, // A trailing comma! #> } #>  #> ℹ Value expected #>   }, // A trailing comma! #> } #>   # Parse only a subset of the JSON text_parse_at_path(text, \"b\") #> [[1]] #> [1] 2 #>  #> [[2]] #> [1] 3 #>  #> [[3]] #> [1] 4 #>  text_parse_at_path(text, \"[r]\") #> $this #> [1] \"setting\" #>  #> $that #> [1] TRUE #>  text_parse_at_path(text, c(\"[r]\", \"that\")) #> [1] TRUE  # Use a `list()` combining strings and positional indices when # arrays are involved text_parse_at_path(text, list(\"b\", 2)) #> [1] 3"}]
