% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/modify.R
\name{modify}
\alias{modify}
\alias{text_modify}
\alias{file_modify}
\alias{modification_options}
\title{Modify a JSON file or string}
\usage{
text_modify(
  text,
  path,
  value,
  ...,
  parse_options = NULL,
  modification_options = NULL
)

file_modify(
  file,
  path,
  value,
  ...,
  parse_options = NULL,
  modification_options = NULL
)

modification_options(formatting_options = NULL, is_array_insertion = FALSE)
}
\arguments{
\item{text}{A single string containing JSON to modify.}

\item{path}{Either:

  - A character vector representing a path to a JSON element by name, i.e.
   `c("[r]", "editor.formatOnSave")`.

  - A list of strings or numbers representing a path to a JSON element by
    name and position, i.e. `list("[r]", "editor.rulers", 2)`.

  Numeric positions are specified as positive integers and are only
  applicable for arrays. `-1` is specially recognized as a request to
  _insert_ at the end of an array.}

\item{value}{New value. Wrap in [V8::JS()] to specify literal JavaScript
value. Use `NULL` to delete the field.}

\item{...}{These dots are for future extensions and must be empty.}

\item{parse_options}{The result of [parse_options()]. If `NULL`, a default
set of options are used.}

\item{modification_options}{The result of [modification_options()]. If
`NULL`, a default set of options are used.}

\item{file}{Path to file on disk. File must exist.}

\item{formatting_options}{The result of a call to [formatting_options()]. If
`NULL`, a default set of options are used.}

\item{is_array_insertion}{Whether or not to treat the change as an
_insertion_ at the specified `path` rather than a _modification_ at that
`path`. Only applicable for arrays.}
}
\description{
Set or delete fields in a JSON file or string while retaining comments
and whitespace.
}
\examples{
text <- "{}"

text <- text_modify(text, c('[r]', 'editor.formatOnSave'), TRUE)
cat(text)

text <- text_modify(text, c('[r]', 'editor.formatOnSave'), NULL)
cat(text)

# Insert an array
text <- text_modify(text, "foo", 1:3)
cat(text)

# Update the array at location 2
cat(text_modify(text, list("foo", 2), 0))

# Insert at location 2
cat(text_modify(
  text,
  list("foo", 2),
  0,
  modification_options = modification_options(is_array_insertion = TRUE)
))

# Insert at the end of the array. `-1` is treated as an insertion regardless
# of the value of `is_array_insertion`.
cat(text_modify(text, list("foo", -1), 0))

# Only the modified elements are reformatted
text <- '{"foo":[1,2],\n"bar":1}'
cat(text_modify(text, list("foo", 3), 0))

# You can control how those elements are formatted
cat(text_modify(
  text,
  list("foo", 3),
  0,
  modification_options = modification_options(
    formatting_options = formatting_options(tab_size = 2),
    is_array_insertion = TRUE
  )
))
}
