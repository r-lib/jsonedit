% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/modify.R
\name{json_modify_text}
\alias{json_modify_text}
\alias{json_modify_file}
\alias{json_format_text}
\alias{json_format_file}
\title{Modify a JSON file or string}
\usage{
json_modify_text(
  text,
  json_path,
  value,
  spaces = 4,
  is_array_insertion = FALSE
)

json_modify_file(
  file,
  json_path,
  value,
  spaces = 4,
  is_array_insertion = FALSE
)

json_format_text(text, spaces = 4)

json_format_file(file, spaces = 4)
}
\arguments{
\item{text}{string with json}

\item{json_path}{character vector or list specifies which element to modify.}

\item{value}{new value. Wrap in [V8::JS()] to specify literal JavaScript value.
Use `NULL` to delete the field.}

\item{spaces}{number of spaces to indent. Use 0 for tabs.}

\item{is_array_insertion}{whether to treat the modification as an insertion
into an array or not. Has no effect when `json_path` doesn't target an array.}

\item{file}{path to file on disk. File must exist.}
}
\description{
Set or delete fields in a JSON file or string while retaining comments
and whitespace.
}
\examples{
# update field on existing settings.json
json_modify_file('settings.json', c('[r]', 'editor.formatOnSave'), TRUE)

# some example operationgs
unlink('test.json')
json_modify_file('test.json', 'title', "This is a test")
json_modify_file('test.json', c("foo", "bar"), 1:3)
json_modify_file('test.json', c("foo", "baz"), TRUE)
json_modify_file('test.json', list("foo", "bar", 1), 9999)
json_modify_file('test.json', list("foo", "bar", 1), 9998, is_array_insertion = TRUE)
}
